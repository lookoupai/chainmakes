version: '3.8'

services:
  # 后端服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    # 或使用预构建镜像(推荐生产环境):
    # image: ghcr.io/yourusername/chainmakes-backend:latest
    container_name: chainmakes-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # 应用配置
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

      # 安全密钥(必须配置)
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-${SECRET_KEY}}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30

      # 数据库配置
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./data/chainmakes.db}
      - DATABASE_URL_ASYNC=${DATABASE_URL_ASYNC:-sqlite+aiosqlite:///./data/chainmakes.db}

      # OKX 交易配置
      - OKX_IS_DEMO=${OKX_IS_DEMO:-true}  # 模拟盘(true)/实盘(false)
      - OKX_PROXY=${OKX_PROXY:-}  # 代理地址(国内需要)

      # CORS 配置
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:3333}

    volumes:
      - ./data:/app/data
      - ./logs:/app/logs

    networks:
      - chainmakes-network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    # 或使用预构建镜像(推荐生产环境):
    # image: ghcr.io/yourusername/chainmakes-frontend:latest
    container_name: chainmakes-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - chainmakes-network

  # PostgreSQL (可选,使用 --profile postgres 启动)
  postgres:
    image: postgres:15-alpine
    container_name: chainmakes-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-chainmakes}
      - POSTGRES_USER=${POSTGRES_USER:-chainmakes}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - chainmakes-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chainmakes}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - postgres

  # Redis (可选,使用 --profile redis 启动)
  redis:
    image: redis:7-alpine
    container_name: chainmakes-redis
    restart: unless-stopped
    command: redis-server ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - chainmakes-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    profiles:
      - redis

networks:
  chainmakes-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
